{
  "version": 3,
  "sources": ["../../mnemonist/fixed-deque.js", "../../graphology-indices/bfs-queue.js", "../../graphology-traversal/utils.js", "../../graphology-traversal/bfs.js", "../../graphology-indices/dfs-stack.js", "../../graphology-traversal/dfs.js", "../../graphology-traversal/index.js"],
  "sourcesContent": ["/**\n * Mnemonist FixedDeque\n * =====================\n *\n * Fixed capacity double-ended queue implemented as ring deque.\n */\nvar iterables = require('./utils/iterables.js'),\n    Iterator = require('obliterator/iterator');\n\n/**\n * FixedDeque.\n *\n * @constructor\n */\nfunction FixedDeque(ArrayClass, capacity) {\n\n  if (arguments.length < 2)\n    throw new Error('mnemonist/fixed-deque: expecting an Array class and a capacity.');\n\n  if (typeof capacity !== 'number' || capacity <= 0)\n    throw new Error('mnemonist/fixed-deque: `capacity` should be a positive number.');\n\n  this.ArrayClass = ArrayClass;\n  this.capacity = capacity;\n  this.items = new ArrayClass(this.capacity);\n  this.clear();\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nFixedDeque.prototype.clear = function() {\n\n  // Properties\n  this.start = 0;\n  this.size = 0;\n};\n\n/**\n * Method used to append a value to the deque.\n *\n * @param  {any}    item - Item to append.\n * @return {number}      - Returns the new size of the deque.\n */\nFixedDeque.prototype.push = function(item) {\n  if (this.size === this.capacity)\n    throw new Error('mnemonist/fixed-deque.push: deque capacity (' + this.capacity + ') exceeded!');\n\n  var index = (this.start + this.size) % this.capacity;\n\n  this.items[index] = item;\n\n  return ++this.size;\n};\n\n/**\n * Method used to prepend a value to the deque.\n *\n * @param  {any}    item - Item to prepend.\n * @return {number}      - Returns the new size of the deque.\n */\nFixedDeque.prototype.unshift = function(item) {\n  if (this.size === this.capacity)\n    throw new Error('mnemonist/fixed-deque.unshift: deque capacity (' + this.capacity + ') exceeded!');\n\n  var index = this.start - 1;\n\n  if (this.start === 0)\n    index = this.capacity - 1;\n\n  this.items[index] = item;\n  this.start = index;\n\n  return ++this.size;\n};\n\n/**\n * Method used to pop the deque.\n *\n * @return {any} - Returns the popped item.\n */\nFixedDeque.prototype.pop = function() {\n  if (this.size === 0)\n    return;\n\n  const index = (this.start + this.size - 1) % this.capacity;\n\n  this.size--;\n\n  return this.items[index];\n};\n\n/**\n * Method used to shift the deque.\n *\n * @return {any} - Returns the shifted item.\n */\nFixedDeque.prototype.shift = function() {\n  if (this.size === 0)\n    return;\n\n  var index = this.start;\n\n  this.size--;\n  this.start++;\n\n  if (this.start === this.capacity)\n    this.start = 0;\n\n  return this.items[index];\n};\n\n/**\n * Method used to peek the first value of the deque.\n *\n * @return {any}\n */\nFixedDeque.prototype.peekFirst = function() {\n  if (this.size === 0)\n    return;\n\n  return this.items[this.start];\n};\n\n/**\n * Method used to peek the last value of the deque.\n *\n * @return {any}\n */\nFixedDeque.prototype.peekLast = function() {\n  if (this.size === 0)\n    return;\n\n  var index = this.start + this.size - 1;\n\n  if (index > this.capacity)\n    index -= this.capacity;\n\n  return this.items[index];\n};\n\n/**\n * Method used to get the desired value of the deque.\n *\n * @param  {number} index\n * @return {any}\n */\nFixedDeque.prototype.get = function(index) {\n  if (this.size === 0)\n    return;\n\n  index = this.start + index;\n\n  if (index > this.capacity)\n    index -= this.capacity;\n\n  return this.items[index];\n};\n\n/**\n * Method used to iterate over the deque.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nFixedDeque.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  var c = this.capacity,\n      l = this.size,\n      i = this.start,\n      j = 0;\n\n  while (j < l) {\n    callback.call(scope, this.items[i], j, this);\n    i++;\n    j++;\n\n    if (i === c)\n      i = 0;\n  }\n};\n\n/**\n * Method used to convert the deque to a JavaScript array.\n *\n * @return {array}\n */\n// TODO: optional array class as argument?\nFixedDeque.prototype.toArray = function() {\n\n  // Optimization\n  var offset = this.start + this.size;\n\n  if (offset < this.capacity)\n    return this.items.slice(this.start, offset);\n\n  var array = new this.ArrayClass(this.size),\n      c = this.capacity,\n      l = this.size,\n      i = this.start,\n      j = 0;\n\n  while (j < l) {\n    array[j] = this.items[i];\n    i++;\n    j++;\n\n    if (i === c)\n      i = 0;\n  }\n\n  return array;\n};\n\n/**\n * Method used to create an iterator over the deque's values.\n *\n * @return {Iterator}\n */\nFixedDeque.prototype.values = function() {\n  var items = this.items,\n      c = this.capacity,\n      l = this.size,\n      i = this.start,\n      j = 0;\n\n  return new Iterator(function() {\n    if (j >= l)\n      return {\n        done: true\n      };\n\n    var value = items[i];\n\n    i++;\n    j++;\n\n    if (i === c)\n      i = 0;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over the deque's entries.\n *\n * @return {Iterator}\n */\nFixedDeque.prototype.entries = function() {\n  var items = this.items,\n      c = this.capacity,\n      l = this.size,\n      i = this.start,\n      j = 0;\n\n  return new Iterator(function() {\n    if (j >= l)\n      return {\n        done: true\n      };\n\n    var value = items[i];\n\n    i++;\n\n    if (i === c)\n      i = 0;\n\n    return {\n      value: [j++, value],\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  FixedDeque.prototype[Symbol.iterator] = FixedDeque.prototype.values;\n\n/**\n * Convenience known methods.\n */\nFixedDeque.prototype.inspect = function() {\n  var array = this.toArray();\n\n  array.type = this.ArrayClass.name;\n  array.capacity = this.capacity;\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: FixedDeque,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  FixedDeque.prototype[Symbol.for('nodejs.util.inspect.custom')] = FixedDeque.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a deque.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @param  {function} ArrayClass - Array class to use.\n * @param  {number}   capacity   - Desired capacity.\n * @return {FiniteStack}\n */\nFixedDeque.from = function(iterable, ArrayClass, capacity) {\n  if (arguments.length < 3) {\n    capacity = iterables.guessLength(iterable);\n\n    if (typeof capacity !== 'number')\n      throw new Error('mnemonist/fixed-deque.from: could not guess iterable length. Please provide desired capacity as last argument.');\n  }\n\n  var deque = new FixedDeque(ArrayClass, capacity);\n\n  if (iterables.isArrayLike(iterable)) {\n    var i, l;\n\n    for (i = 0, l = iterable.length; i < l; i++)\n      deque.items[i] = iterable[i];\n\n    deque.size = l;\n\n    return deque;\n  }\n\n  iterables.forEach(iterable, function(value) {\n    deque.push(value);\n  });\n\n  return deque;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = FixedDeque;\n", "/**\n * Graphology BFS Queue\n * =====================\n *\n * An experiment to speed up BFS in graphs and connected component detection.\n *\n * It should mostly save memory and not improve theoretical runtime.\n */\nvar FixedDeque = require('mnemonist/fixed-deque');\n\nfunction BFSQueue(graph) {\n  this.graph = graph;\n  this.queue = new FixedDeque(Array, graph.order);\n  this.seen = new Set();\n  this.size = 0;\n}\n\nBFSQueue.prototype.hasAlreadySeenEverything = function () {\n  return this.seen.size === this.graph.order;\n};\n\nBFSQueue.prototype.countUnseenNodes = function () {\n  return this.graph.order - this.seen.size;\n};\n\nBFSQueue.prototype.forEachNodeYetUnseen = function (callback) {\n  var seen = this.seen;\n  var graph = this.graph;\n\n  graph.someNode(function (node, attr) {\n    // Useful early exit for connected graphs\n    if (seen.size === graph.order) return true; // break\n\n    // Node already seen?\n    if (seen.has(node)) return false; // continue\n\n    var shouldBreak = callback(node, attr);\n\n    if (shouldBreak) return true;\n\n    return false;\n  });\n};\n\nBFSQueue.prototype.has = function (node) {\n  return this.seen.has(node);\n};\n\nBFSQueue.prototype.push = function (node) {\n  var seenSizeBefore = this.seen.size;\n\n  this.seen.add(node);\n\n  // If node was already seen\n  if (seenSizeBefore === this.seen.size) return false;\n\n  this.queue.push(node);\n  this.size++;\n\n  return true;\n};\n\nBFSQueue.prototype.pushWith = function (node, item) {\n  var seenSizeBefore = this.seen.size;\n\n  this.seen.add(node);\n\n  // If node was already seen\n  if (seenSizeBefore === this.seen.size) return false;\n\n  this.queue.push(item);\n  this.size++;\n\n  return true;\n};\n\nBFSQueue.prototype.shift = function () {\n  var item = this.queue.shift();\n  this.size = this.queue.size;\n\n  return item;\n};\n\nmodule.exports = BFSQueue;\n", "/**\n * Graphology Traversal Utils\n * ===========================\n *\n * Miscellaneous utils used throughout the library.\n */\n\nfunction TraversalRecord(node, attr, depth) {\n  this.node = node;\n  this.attributes = attr;\n  this.depth = depth;\n}\n\nfunction capitalize(string) {\n  return string[0].toUpperCase() + string.slice(1);\n}\n\nexports.TraversalRecord = TraversalRecord;\nexports.capitalize = capitalize;\n", "/**\n * Graphology Traversal BFS\n * =========================\n *\n * Breadth-First Search traversal function.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar BFSQueue = require('graphology-indices/bfs-queue');\nvar utils = require('./utils');\n\nvar TraversalRecord = utils.TraversalRecord;\nvar capitalize = utils.capitalize;\n\n/**\n * BFS traversal in the given graph using a callback function\n *\n * @param {Graph}    graph        - Target graph.\n * @param {string}   startingNode - Optional Starting node.\n * @param {function} callback     - Iteration callback.\n * @param {object}   options      - Options:\n * @param {string}     mode         - Traversal mode.\n */\nfunction abstractBfs(graph, startingNode, callback, options) {\n  options = options || {};\n\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-traversal/bfs: expecting a graphology instance.'\n    );\n\n  if (typeof callback !== 'function')\n    throw new Error(\n      'graphology-traversal/bfs: given callback is not a function.'\n    );\n\n  // Early termination\n  if (graph.order === 0) return;\n\n  var queue = new BFSQueue(graph);\n\n  var forEachNeighbor =\n    graph['forEach' + capitalize(options.mode || 'outbound') + 'Neighbor'].bind(\n      graph\n    );\n\n  var forEachNode;\n\n  if (startingNode === null) {\n    forEachNode = queue.forEachNodeYetUnseen.bind(queue);\n  } else {\n    forEachNode = function (fn) {\n      startingNode = '' + startingNode;\n      fn(startingNode, graph.getNodeAttributes(startingNode));\n    };\n  }\n\n  var record, stop;\n\n  function visit(neighbor, attr) {\n    queue.pushWith(\n      neighbor,\n      new TraversalRecord(neighbor, attr, record.depth + 1)\n    );\n  }\n\n  forEachNode(function (node, attr) {\n    queue.pushWith(node, new TraversalRecord(node, attr, 0));\n\n    while (queue.size !== 0) {\n      record = queue.shift();\n\n      stop = callback(record.node, record.attributes, record.depth);\n\n      if (stop === true) continue;\n\n      forEachNeighbor(record.node, visit);\n    }\n  });\n}\n\nexports.bfs = function (graph, callback, options) {\n  return abstractBfs(graph, null, callback, options);\n};\nexports.bfsFromNode = abstractBfs;\n", "/**\n * Graphology DFS Stack\n * =====================\n *\n * An experiment to speed up DFS in graphs and connected component detection.\n *\n * It should mostly save memory and not improve theoretical runtime.\n */\nfunction DFSStack(graph) {\n  this.graph = graph;\n  this.stack = new Array(graph.order);\n  this.seen = new Set();\n  this.size = 0;\n}\n\nDFSStack.prototype.hasAlreadySeenEverything = function () {\n  return this.seen.size === this.graph.order;\n};\n\nDFSStack.prototype.countUnseenNodes = function () {\n  return this.graph.order - this.seen.size;\n};\n\nDFSStack.prototype.forEachNodeYetUnseen = function (callback) {\n  var seen = this.seen;\n  var graph = this.graph;\n\n  graph.someNode(function (node, attr) {\n    // Useful early exit for connected graphs\n    if (seen.size === graph.order) return true; // break\n\n    // Node already seen?\n    if (seen.has(node)) return false; // continue\n\n    var shouldBreak = callback(node, attr);\n\n    if (shouldBreak) return true;\n\n    return false;\n  });\n};\n\nDFSStack.prototype.has = function (node) {\n  return this.seen.has(node);\n};\n\nDFSStack.prototype.push = function (node) {\n  var seenSizeBefore = this.seen.size;\n\n  this.seen.add(node);\n\n  // If node was already seen\n  if (seenSizeBefore === this.seen.size) return false;\n\n  this.stack[this.size++] = node;\n\n  return true;\n};\n\nDFSStack.prototype.pushWith = function (node, item) {\n  var seenSizeBefore = this.seen.size;\n\n  this.seen.add(node);\n\n  // If node was already seen\n  if (seenSizeBefore === this.seen.size) return false;\n\n  this.stack[this.size++] = item;\n\n  return true;\n};\n\nDFSStack.prototype.pop = function () {\n  if (this.size === 0) return;\n\n  return this.stack[--this.size];\n};\n\nmodule.exports = DFSStack;\n", "/**\n * Graphology Traversal DFS\n * =========================\n *\n * Depth-First Search traversal function.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar DFSStack = require('graphology-indices/dfs-stack');\nvar utils = require('./utils');\n\nvar TraversalRecord = utils.TraversalRecord;\nvar capitalize = utils.capitalize;\n\n/**\n * DFS traversal in the given graph using a callback function\n *\n * @param {Graph}    graph        - Target graph.\n * @param {string}   startingNode - Optional Starting node.\n * @param {function} callback     - Iteration callback.\n * @param {object}   options      - Options:\n * @param {string}     mode         - Traversal mode.\n */\nfunction abstractDfs(graph, startingNode, callback, options) {\n  options = options || {};\n\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-traversal/dfs: expecting a graphology instance.'\n    );\n\n  if (typeof callback !== 'function')\n    throw new Error(\n      'graphology-traversal/dfs: given callback is not a function.'\n    );\n\n  // Early termination\n  if (graph.order === 0) return;\n\n  var stack = new DFSStack(graph);\n\n  var forEachNeighbor =\n    graph['forEach' + capitalize(options.mode || 'outbound') + 'Neighbor'].bind(\n      graph\n    );\n\n  var forEachNode;\n\n  if (startingNode === null) {\n    forEachNode = stack.forEachNodeYetUnseen.bind(stack);\n  } else {\n    forEachNode = function (fn) {\n      startingNode = '' + startingNode;\n      fn(startingNode, graph.getNodeAttributes(startingNode));\n    };\n  }\n\n  var record, stop;\n\n  function visit(neighbor, attr) {\n    stack.pushWith(\n      neighbor,\n      new TraversalRecord(neighbor, attr, record.depth + 1)\n    );\n  }\n\n  forEachNode(function (node, attr) {\n    stack.pushWith(node, new TraversalRecord(node, attr, 0));\n\n    while (stack.size !== 0) {\n      record = stack.pop();\n\n      stop = callback(record.node, record.attributes, record.depth);\n\n      if (stop === true) continue;\n\n      forEachNeighbor(record.node, visit);\n    }\n  });\n}\n\nexports.dfs = function (graph, callback, options) {\n  return abstractDfs(graph, null, callback, options);\n};\nexports.dfsFromNode = abstractDfs;\n", "var bfsModule = require('./bfs.js');\nvar dfsModule = require('./dfs.js');\n\nexports.bfs = bfsModule.bfs;\nexports.bfsFromNode = bfsModule.bfsFromNode;\nexports.dfs = dfsModule.dfs;\nexports.dfsFromNode = dfsModule.dfsFromNode;\n"],
  "mappings": "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",
  "names": []
}
